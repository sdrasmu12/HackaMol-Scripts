use HackaMol;
use HackaMol::X::Orca;
use Modern::Perl;
use YAML::XS qw(LoadFile DumpFile);
use POSIX;

# setup

my $t1 = time;

my $file = shift;
my $mol = HackaMol->new->read_file_mol($file);
say 'Done Reading';

my $root = $file;
$root =~ s/\.xyz//;
my $histo = LoadFile("xtals_best.txt");
my %histo = %{$histo};


#establish dihedrals
my $dihe1 = HackaMol::Dihedral->new(
                                is_constrained => 1,
                                    atoms=> [
                                $mol->get_atoms(1),
                                $mol->get_atoms(0),
                                $mol->get_atoms(3),
                                $mol->get_atoms(4),
                                             ],
);

my $dihe2 = HackaMol::Dihedral->new(
                               is_constrained => 1,
                                    atoms=> [
                                $mol->get_atoms(0),
                                $mol->get_atoms(3),
                                $mol->get_atoms(4),
                                $mol->get_atoms(10),
                                             ],
);

my $dihe3 = HackaMol::Dihedral->new(
                                is_constrained => 1,
                                    atoms=> [
                                $mol->get_atoms(3),
                                $mol->get_atoms(4),
                                $mol->get_atoms(10),
                                $mol->get_atoms(9),
                                             ],
);

my $dihe1p = HackaMol::Dihedral->new(
                                is_constrained => 1,
                                   atoms=> [
                                $mol->get_atoms(7),
                                $mol->get_atoms(6),
                                $mol->get_atoms(9),
                                $mol->get_atoms(10),
                                             ],
);


my $dihe2p = HackaMol::Dihedral->new(
                                is_constrained => 1,
                                    atoms=> [
                                $mol->get_atoms(7),
                                $mol->get_atoms(9),
                                $mol->get_atoms(10),
                               $mol->get_atoms(4),
                                             ],
);



# push dihedrals
$mol->push_dihedrals($dihe1);
$mol->push_dihedrals($dihe2);
$mol->push_dihedrals($dihe3);
$mol->push_dihedrals($dihe1p);
$mol->push_dihedrals($dihe2p);

#checks
say $dihe1->dihe_deg;
say $dihe2->dihe_deg;
say $dihe1p->dihe_deg;
say $dihe2p->dihe_deg;
say $dihe3->dihe_deg;

#set up orca
my $orca2 = HackaMol::X::Orca->new(
      mol             => $mol,
      has_constraints => 1,      
      theory          => 'HF-3c',
      exe             => '/Users/chem_student/perl5/apps/orca_3_0_3_macosx_openmpi165/orca',
      scratch         => 'tmp',
);

# get ready for the foreach loop
$mol->gt(0);
open(my $in, ">", "xtals_energies.txt") or die "couldn't open";
#my %fresults;
#my $partit = 5;
#my $partit2 = 1;

#my $nnbond = HackaMol::Bond->new(
#    atoms=> [
#    $mol->get_atoms(6),
#   $mol->get_atoms(0),
#  ]
#);


#say $nnbond->bond_length;
#my $nnlength = 0;

foreach my $dist (sort { $a <=> $b } keys %histo){
  foreach my $chi3 (sort{ $a <=> $b } keys %{$histo{$dist}}){
      my $t = $histo{$dist}{$chi3};
      $mol->t($t);
      my $mol_calc = protonation($mol, $t);
    #foreach my $t (@{$histo{$dist}{$chi3}}){
      #my @energies = (0);
      my @energies = $orca2->opt;
      my $mol2 = $orca2->load_trj;
      $mol2->print_xyz_ts([0 .. $mol2->tmax]);
      printf ("%10.3f %10.3f %10.2f\n", $dist, $chi3,   $mol2->get_energy($mol2->tmax)*627.51);
      printf $in ("%10.3f %10.3f %10.2f\n",$dist, $chi3,  $energies[-1]*627.51); 
      exit;
  } 
}


sub protonation {
  my $mol = shift;
  say $mol->t; exit;
$mol->print_xyz;1

#build in two oxygen
my @atoms = map{$_->xyz} $mol->all_atoms;
my $nerf = HackaMol::X::NERF->new;

my @atoms = map{$_->xyz} $mol->all_atoms;
my $nerf = HackaMol::X::NERF->new;

my $o1 = $nerf->extend_abc( $atoms[3], $atoms[1], $atoms[2], 1.3, 120, 180 );
my $o2 = $nerf->extend_abc( $atoms[9], $atoms[7], $atoms[8], 1.3, 120, 180 );

$mol->push_atoms (
    map{ HackaMol::Atom->new(Z => 8, coords => [$_]) } ($o1,$o2)
);
$mol->print_xyz;

my @atoms = map{$_->xyz} $mol->all_atoms;
my $nerf = HackaMol::X::NERF->new;

my $h1 = $nerf->extend_abc( $atoms[2], $atoms[1], $atoms[0], 1.0, 120, 1 );
my $h2 = $nerf->extend_abc( $atoms[2], $atoms[1], $atoms[0], 1.0, 120, 180 );
my $h3 = $nerf->extend_abc( $atoms[7], $atoms[5], $atoms[6], 1.0, 120, 1 );
my $h4 = $nerf->extend_abc( $atoms[7], $atoms[5], $atoms[6], 1.0, 120, 180 );
my $h5 = $nerf->extend_abc( $atoms[2], $atoms[0], $atoms[1], 1.47, 109, 120);
my $h6 = $nerf->extend_abc( $atoms[8], $atoms[6], $atoms[7], 1.47, 109, 90);
my $h7 = $nerf->extend_abc( $atoms[5], $atoms[3], $atoms[4], 1.47, 109, -90);
my $h8 = $nerf->extend_abc( $atoms[5], $atoms[3], $atoms[4], 1.47, 109, 90);
my $h9 = $nerf->extend_abc( $atoms[11], $atoms[9], $atoms[10], 1.47, 109, 270);
my $h10 = $nerf->extend_abc( $atoms[11], $atoms[9], $atoms[10], 1.47, 109, 90);
my $h11 = $nerf->extend_abc( $atoms[3], $atoms[2], $atoms[12], 0.96, 180, 180);
my $h12 = $nerf->extend_abc( $atoms[9], $atoms[8], $atoms[13], 0.96, 180, 90);

$mol->push_atoms (
    map{ HackaMol::Atom->new(Z => 1, coords => [$_]) } ($h1,$h2,$h3,$h4,$h5,$h6,$h7,$h8,$h9,$h10,$h11,$h12)
);

#$mol->print_xyz;

#$mol->print_xyz('cys_oo.xyz');1

return ($mol);

}



=cut;

  $fresults{$nnlength}{$chi3}++;


  # sets variables to the appropriate angle rounded up and in partitions set above

#  unless( exists( $results{$chi1}{$chi2}{$chi3}{$chi1p}{$chi2p} ) ) {
  unless( exists( $results{$chi3}{$nnlength} ) ) {
    $results{$chi1}{$chi2}++;
    $results{$chi1}{$chi2p}++;
    $results{$chi1p}{$chi2}++;
    $results{$chi1p}{$chi2p}++;



#    $results{$chi3}{$nnlength}++;
  
#  my @energies = $orca2->opt;
#  printf ("%10.3f %10.3f %10.3f %10.3f %10.3f %14.6f\n",$dihe1->dihe_deg, $dihe1p->dihe_deg, $dihe2->dihe_deg, $dihe2p->dihe_deg, $dihe3->dihe_deg, $energies[-1]*627.51);
#  printf $in ("%10.3f %10.3f %10.3f %10.3f %10.3f %14.6f\n",$dihe1->dihe_deg, $dihe1p->dihe_deg, $dihe2->dihe_deg, $dihe2p->dihe_deg, $dihe3->dihe_deg, $energies[-1]*627.51);  
#    printf $in ("%10.3f %10.3f %10.3f\n",$dihe1->dihe_deg, $dihe2->dihe_deg, $nnlength*$partit2); 
#    printf $in ("%10.3f %10.3f %10.3f\n",$dihe1p->dihe_deg, $dihe2p->dihe_deg, $nnlength*$partit2);
  #my $mol2 = HackaMol->new->read_file_mol("tmp/mol.xyz");
  #$mol2->print_xyz($fh);
  
#  else
#  );
#  }
}
#};

my $root = $file;
$root =~ s/\.xyz//;

open(my $fchi3, ">", "$root\_dist_chi3.txt") or die "couldn't open";
open(my $fchi12, ">", "$root\_chi1_chi2.txt") or die "couldn't open";


my $tot= 0;
foreach my $dist (sort { $a <=> $b } keys %fresults){
  foreach my $chi3 (sort{ $a <=> $b } keys %{$fresults{$dist}}){
    $tot++;
    say "total configs: $tot ", "number of configs for $dist $chi3:", $fresults{$dist}{$chi3}; 
  }
}

say "total number of configs ", $tot;

#use Data::Dumper;

#print Dumper \%results;

